/**
 * METS API Documentation
 * METS API Documentation
 *
 * The version of the OpenAPI document: uk-pmrv-app-api 0.81.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpEvent, HttpHeaders, HttpParameterCodec, HttpParams, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';

import { Observable } from 'rxjs';

import { Configuration } from '../configuration';
import { CustomHttpParameterCodec } from '../encoder';
import { AerMarkNotRequiredDetails } from '../model/aerMarkNotRequiredDetails';
import { BatchReissuesResponseDTO } from '../model/batchReissuesResponseDTO';
import { RequestCreateActionProcessDTO } from '../model/requestCreateActionProcessDTO';
import { RequestCreateActionProcessResponseDTO } from '../model/requestCreateActionProcessResponseDTO';
import { RequestCreateValidationResult } from '../model/requestCreateValidationResult';
import { RequestDetailsDTO } from '../model/requestDetailsDTO';
import { RequestDetailsSearchResults } from '../model/requestDetailsSearchResults';
import { RequestSearchCriteria } from '../model/requestSearchCriteria';
import { BASE_PATH } from '../variables';

@Injectable({
  providedIn: 'root',
})
export class RequestsService {
  protected basePath = 'http://localhost:8080/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach((elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k)),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Get workflows to start a task
   * @param accountId The account id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAvailableAccountWorkflows(accountId: number): Observable<{ [key: string]: RequestCreateValidationResult }>;
  public getAvailableAccountWorkflows(
    accountId: number,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<HttpResponse<{ [key: string]: RequestCreateValidationResult }>>;
  public getAvailableAccountWorkflows(
    accountId: number,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<HttpEvent<{ [key: string]: RequestCreateValidationResult }>>;
  public getAvailableAccountWorkflows(
    accountId: number,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<{ [key: string]: RequestCreateValidationResult }>;
  public getAvailableAccountWorkflows(
    accountId: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<any> {
    if (accountId === null || accountId === undefined) {
      throw new Error('Required parameter accountId was null or undefined when calling getAvailableAccountWorkflows.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*', 'application/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<{ [key: string]: RequestCreateValidationResult }>(
      `${this.configuration.basePath}/v1.0/requests/available-workflows/permit/${encodeURIComponent(String(accountId))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get workflows to start a task
   * @param aerRequestId The AER request id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAvailableAerWorkflows(aerRequestId: string): Observable<{ [key: string]: RequestCreateValidationResult }>;
  public getAvailableAerWorkflows(
    aerRequestId: string,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<HttpResponse<{ [key: string]: RequestCreateValidationResult }>>;
  public getAvailableAerWorkflows(
    aerRequestId: string,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<HttpEvent<{ [key: string]: RequestCreateValidationResult }>>;
  public getAvailableAerWorkflows(
    aerRequestId: string,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<{ [key: string]: RequestCreateValidationResult }>;
  public getAvailableAerWorkflows(
    aerRequestId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' | 'application/json' },
  ): Observable<any> {
    if (aerRequestId === null || aerRequestId === undefined) {
      throw new Error('Required parameter aerRequestId was null or undefined when calling getAvailableAerWorkflows.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*', 'application/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<{ [key: string]: RequestCreateValidationResult }>(
      `${this.configuration.basePath}/v1.0/requests/available-workflows/reporting/aer/${encodeURIComponent(String(aerRequestId))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get the batch reissue requests
   * @param accountType The account type
   * @param page The page number starting from zero
   * @param size The page size
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getBatchReissueRequests(
    accountType: 'INSTALLATION' | 'AVIATION',
    page: number,
    size: number,
  ): Observable<BatchReissuesResponseDTO>;
  public getBatchReissueRequests(
    accountType: 'INSTALLATION' | 'AVIATION',
    page: number,
    size: number,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpResponse<BatchReissuesResponseDTO>>;
  public getBatchReissueRequests(
    accountType: 'INSTALLATION' | 'AVIATION',
    page: number,
    size: number,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpEvent<BatchReissuesResponseDTO>>;
  public getBatchReissueRequests(
    accountType: 'INSTALLATION' | 'AVIATION',
    page: number,
    size: number,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<BatchReissuesResponseDTO>;
  public getBatchReissueRequests(
    accountType: 'INSTALLATION' | 'AVIATION',
    page: number,
    size: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<any> {
    if (accountType === null || accountType === undefined) {
      throw new Error('Required parameter accountType was null or undefined when calling getBatchReissueRequests.');
    }
    if (page === null || page === undefined) {
      throw new Error('Required parameter page was null or undefined when calling getBatchReissueRequests.');
    }
    if (size === null || size === undefined) {
      throw new Error('Required parameter size was null or undefined when calling getBatchReissueRequests.');
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (page !== undefined && page !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>page, 'page');
    }
    if (size !== undefined && size !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<BatchReissuesResponseDTO>(
      `${this.configuration.basePath}/v1.0/${encodeURIComponent(String(accountType))}/batch-reissue-requests`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get request details by id
   * @param id The request id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRequestDetailsById(id: string): Observable<RequestDetailsDTO>;
  public getRequestDetailsById(
    id: string,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpResponse<RequestDetailsDTO>>;
  public getRequestDetailsById(
    id: string,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpEvent<RequestDetailsDTO>>;
  public getRequestDetailsById(
    id: string,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<RequestDetailsDTO>;
  public getRequestDetailsById(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getRequestDetailsById.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<RequestDetailsDTO>(
      `${this.configuration.basePath}/v1.0/requests/${encodeURIComponent(String(id))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Get the workflows for the given search criteria
   * @param requestSearchCriteria
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRequestDetailsByResource(
    requestSearchCriteria: RequestSearchCriteria,
  ): Observable<RequestDetailsSearchResults>;
  public getRequestDetailsByResource(
    requestSearchCriteria: RequestSearchCriteria,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpResponse<RequestDetailsSearchResults>>;
  public getRequestDetailsByResource(
    requestSearchCriteria: RequestSearchCriteria,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpEvent<RequestDetailsSearchResults>>;
  public getRequestDetailsByResource(
    requestSearchCriteria: RequestSearchCriteria,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<RequestDetailsSearchResults>;
  public getRequestDetailsByResource(
    requestSearchCriteria: RequestSearchCriteria,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<any> {
    if (requestSearchCriteria === null || requestSearchCriteria === undefined) {
      throw new Error(
        'Required parameter requestSearchCriteria was null or undefined when calling getRequestDetailsByResource.',
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.post<RequestDetailsSearchResults>(
      `${this.configuration.basePath}/v1.0/requests/workflows`,
      requestSearchCriteria,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Check if the user has access to mark as not required
   * @param id The request id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public hasAccessMarkAsNotRequired(id: string): Observable<boolean>;
  public hasAccessMarkAsNotRequired(
    id: string,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<boolean>>;
  public hasAccessMarkAsNotRequired(
    id: string,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<boolean>>;
  public hasAccessMarkAsNotRequired(
    id: string,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<boolean>;
  public hasAccessMarkAsNotRequired(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling hasAccessMarkAsNotRequired.');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<boolean>(
      `${this.configuration.basePath}/v1.0/mets/requests/access-to-mark-as-not-required/${encodeURIComponent(String(id))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Mark as not required the given request and terminate Aer workflow
   * @param id The request id
   * @param aerMarkNotRequiredDetails
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public markAsNotRequired(id: string, aerMarkNotRequiredDetails: AerMarkNotRequiredDetails): Observable<string>;
  public markAsNotRequired(
    id: string,
    aerMarkNotRequiredDetails: AerMarkNotRequiredDetails,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<string>>;
  public markAsNotRequired(
    id: string,
    aerMarkNotRequiredDetails: AerMarkNotRequiredDetails,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<string>>;
  public markAsNotRequired(
    id: string,
    aerMarkNotRequiredDetails: AerMarkNotRequiredDetails,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<string>;
  public markAsNotRequired(
    id: string,
    aerMarkNotRequiredDetails: AerMarkNotRequiredDetails,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling markAsNotRequired.');
    }
    if (aerMarkNotRequiredDetails === null || aerMarkNotRequiredDetails === undefined) {
      throw new Error(
        'Required parameter aerMarkNotRequiredDetails was null or undefined when calling markAsNotRequired.',
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.post<string>(
      `${this.configuration.basePath}/v1.0/mets/requests/mark-as-not-required/${encodeURIComponent(String(id))}`,
      aerMarkNotRequiredDetails,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Processes a request create action
   * @param requestCreateActionProcessDTO
   * @param resourceId The resource id on which a request will be created (e.g accountId, CA etc.)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public processRequestCreateAction(
    requestCreateActionProcessDTO: RequestCreateActionProcessDTO,
    resourceId?: string,
  ): Observable<RequestCreateActionProcessResponseDTO>;
  public processRequestCreateAction(
    requestCreateActionProcessDTO: RequestCreateActionProcessDTO,
    resourceId: string,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpResponse<RequestCreateActionProcessResponseDTO>>;
  public processRequestCreateAction(
    requestCreateActionProcessDTO: RequestCreateActionProcessDTO,
    resourceId: string,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<HttpEvent<RequestCreateActionProcessResponseDTO>>;
  public processRequestCreateAction(
    requestCreateActionProcessDTO: RequestCreateActionProcessDTO,
    resourceId: string,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<RequestCreateActionProcessResponseDTO>;
  public processRequestCreateAction(
    requestCreateActionProcessDTO: RequestCreateActionProcessDTO,
    resourceId?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' },
  ): Observable<any> {
    if (requestCreateActionProcessDTO === null || requestCreateActionProcessDTO === undefined) {
      throw new Error(
        'Required parameter requestCreateActionProcessDTO was null or undefined when calling processRequestCreateAction.',
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (resourceId !== undefined && resourceId !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>resourceId, 'resourceId');
    }

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    const credential = this.configuration.lookupCredential('bearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.post<RequestCreateActionProcessResponseDTO>(
      `${this.configuration.basePath}/v1.0/requests`,
      requestCreateActionProcessDTO,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
