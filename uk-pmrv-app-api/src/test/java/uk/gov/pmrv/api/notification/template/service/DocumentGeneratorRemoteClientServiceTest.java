package uk.gov.pmrv.api.notification.template.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import uk.gov.netz.api.restclient.RestClientApi;
import uk.gov.pmrv.api.notification.template.config.DocumentGeneratorProperties;
import uk.gov.pmrv.api.notification.template.config.RestEndPointEnum;
import uk.gov.pmrv.api.notification.template.domain.dto.DocumentParameters;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class DocumentGeneratorRemoteClientServiceTest {

	@InjectMocks
	private DocumentGeneratorRemoteClientService documentGeneratorRemoteClientService;

    @Mock
    private DocumentGeneratorProperties properties;

    @Mock
    private RestTemplate restTemplate;

	@Test
	void generateDocument() {
		byte[] source = "some bytes".getBytes();
		String outputFilename = "targetFile.pdf";
		String baseUrl = "http://localhost:8081";

		final HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.setContentType(MediaType.MULTIPART_FORM_DATA);

		final MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
		body.add("file", new ByteArrayResource(source) {
			@Override
			public String getFilename() {
				return "source";
			}
		});
		body.add("parameters", DocumentParameters.builder().outputFilename(outputFilename).build());

		byte[] resultExpected = "some generated bytes".getBytes();

		RestClientApi appRestApi = RestClientApi.builder()
				.uri(UriComponentsBuilder
						.fromUriString(baseUrl)
						.path(RestEndPointEnum.GENERATE.getPath())
						.build()
						.toUri())
				.restEndPoint(RestEndPointEnum.GENERATE)
				.headers(httpHeaders)
				.restTemplate(restTemplate)
				.body(body)
				.build();

		when(properties.getUrl()).thenReturn(baseUrl);
		when(restTemplate.exchange(appRestApi.getUri(), RestEndPointEnum.GENERATE.getMethod(),
				new HttpEntity<>(body, httpHeaders), new ParameterizedTypeReference<byte[]>() {}))
				.thenReturn(new ResponseEntity<>(resultExpected, HttpStatus.OK));

		byte[] resultActual = documentGeneratorRemoteClientService.generateDocument(source, outputFilename);

		assertThat(resultActual).isEqualTo(resultExpected);

		verify(properties, times(1)).getUrl();
		verify(restTemplate, times(1)).exchange(appRestApi.getUri(), RestEndPointEnum.GENERATE.getMethod(),
				new HttpEntity<>(body, httpHeaders), new ParameterizedTypeReference<byte[]>() {});
	}
}
