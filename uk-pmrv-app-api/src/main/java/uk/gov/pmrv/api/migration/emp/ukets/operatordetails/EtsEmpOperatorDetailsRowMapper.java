package uk.gov.pmrv.api.migration.emp.ukets.operatordetails;

import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class EtsEmpOperatorDetailsRowMapper implements RowMapper<EtsEmpOperatorDetails> {

    @Override
    public EtsEmpOperatorDetails mapRow(ResultSet rs, int rowNum) throws SQLException {

        return EtsEmpOperatorDetails.builder()
                .etsAccountId(rs.getString("fldEmitterID"))
                .serviceContactName(rs.getString("srvCntName"))
                .serviceContactEmail(rs.getString("srvCntEmail"))
                .operatorName(rs.getString("Aircraft_operator_name"))
                .crcoCode(rs.getString("Aircraft_operator_unique_id"))
                .isIcaoDesignator(rs.getBoolean("Icao_designator_yes"))
                .icaoDesignator(rs.getBoolean("Icao_designator_yes") ? rs.getString("Unique_icao_designator") : null)
                .aircraftRegistrationMarkings(!rs.getBoolean("Icao_designator_yes") ? Stream.of(rs.getString("Aircraft_registration_markings").split("\\s*,\\s*"))
                        .filter(s -> !s.isEmpty())
                        .map(String::trim)
                        .collect(Collectors.toSet()) : null)
                .operatingCertificateExist(rs.getBoolean("Air_operating_certificate_yes"))
                .aocNumber(rs.getBoolean("Air_operating_certificate_yes") ? rs.getString("Aoc_number") : null)
                .aocIssuingAuthority(rs.getBoolean("Air_operating_certificate_yes") ? rs.getString("Issuing_authority_name") : null)
                .aocStoredFileName(rs.getString("aoc_storedFileName"))
                .aocUploadedFileName(rs.getString("aoc_uploadedFileName"))
                .operatingLicenseExist(rs.getBoolean("Operating_license_yes"))
                .operatingLicenseRefNumber(rs.getBoolean("Operating_license_yes") ? rs.getString("Operator_license_ref_number") : null)
                .operatingLicenseIssuingAuthority(rs.getBoolean("Operating_license_yes") ? rs.getString("Operation_licence_issuing_authority_name") : null)
                .legalStatus(rs.getString("Aircraft_operator_legal_status"))
                .registeredCompanyExist(rs.getBoolean("Registered_company_details_yes"))
                .companyRegistrationNumber(!rs.getBoolean("Registered_company_details_yes") ? rs.getString("Company_registration_number") : null)
                .registeredCompanyRegistrationNumber(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_company_registration_number") : null)
                .registeredAddressLine1(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_address_line_1") : null)
                .registeredAddressLine2(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_address_line_2") : null)
                .registeredCity(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_city") : null)
                .registeredStateProvinceRegion(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_state_province_region") : null)
                .registeredPostcode(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_postcode_zip") : null)
                .registeredCountry(rs.getBoolean("Registered_company_details_yes") ? rs.getString("Registered_country") : null)
                .companyLtdAddressLine1(rs.getString("Company_ltd_address_line1"))
                .companyLtdAddressLine2(rs.getString("Company_ltd_address_line2"))
                .companyLtdCity(rs.getString("Company_ltd_city"))
                .companyLtdStateProvinceRegion(rs.getString("Company_ltd_state_province_region"))
                .companyLtdPostcode(rs.getString("Company_ltd_postcode_zip"))
                .companyLtdCountry(rs.getString("Company_ltd_country"))
                .aircraftOperatorContactFirstName(rs.getString("Aircraft_operator_contact_firstname"))
                .aircraftOperatorContactSurname(rs.getString("Aircraft_operator_contact_surname"))
                .aoAddressLine1(rs.getString("Ao_address_line_1"))
                .aoAddressLine2(rs.getString("Ao_address_line_2"))
                .aoCity(rs.getString("Ao_city"))
                .aoStateProvinceRegion(rs.getString("Ao_state_province_region"))
                .aoPostcode(rs.getString("Ao_postcode_zip"))
                .aoCountry(rs.getString("Ao_country"))
                .partnershipName(rs.getString("Partnership_name"))
                .partnerAddressLine1(rs.getString("Partner_address_line_1"))
                .partnerAddressLine2(rs.getString("Partner_address_line_2"))
                .partnerCity(rs.getString("Partner_city"))
                .partnerStateProvinceRegion(rs.getString("Partner_state_province_region"))
                .partnerPostcode(rs.getString("Partner_postcode_zip"))
                .partnerCountry(rs.getString("Partner_country"))
                .partners(rs.getString("Partners") != null ? Stream.of(rs.getString("Partners").split("\\s*,\\s*"))
                        .filter(s -> !s.isEmpty())
                        .map(String::trim)
                        .collect(Collectors.toSet()) : null)
                .operatorType(rs.getString("Commercial_non_commercial"))
                .carriedOutFlights(rs.getString("Carried_out_flights"))
                .aviationActivity(rs.getString("Aviation_activity"))
                .activityDescription(rs.getString("Activity_desc"))
                .emissionSourcesProcedureTitle(rs.getString("Emission_sources_procedure_title"))
                .emissionSourcesProcedureReference(rs.getString("Emission_sources_procedure_reference"))
                .emissionSourcesProcedureDescription(rs.getString("Emission_sources_procedure_description"))
                .emissionSourcesDataMaintenancePost(rs.getString("Emission_sources_data_maintenance_post"))
                .emissionSourcesRecordsLocation(rs.getString("Emission_sources_records_location"))
                .emissionSourcesSystemName(rs.getString("Emission_sources_system_name"))
                .flightsListProcedureTitle(rs.getString("Flights_list_procedure_title"))
                .flightsListProcedureReference(rs.getString("Flights_list_procedure_reference"))
                .flightsListProcedureDescription(rs.getString("Flights_list_procedure_description"))
                .flightsListDataMaintenancePost(rs.getString("Flights_list_data_maintenance_post"))
                .flightsListRecordsLocation(rs.getString("Flights_list_records_location"))
                .flightsListSystemName(rs.getString("Flights_list_system_name"))
                .annex1ProcedureTitle(rs.getString("Annex_1_procedure_title"))
                .annex1ProcedureReference(rs.getString("Annex_1_procedure_reference"))
                .annex1ProcedureDescription(rs.getString("Annex_1_procedure_description"))
                .annex1DataMaintenancePost(rs.getString("Annex_1_data_maintenance_post"))
                .annex1RecordsLocation(rs.getString("Annex_1_records_location"))
                .annex1SystemName(rs.getString("Annex_1_system_name"))
                .build();
    }
}
